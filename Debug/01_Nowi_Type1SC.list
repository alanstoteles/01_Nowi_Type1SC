
01_Nowi_Type1SC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003844  08003844  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800384c  0800384c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000190  080039e4  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080039e4  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d38  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b56  00000000  00000000  00029ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108fd  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab00  00000000  00000000  0003d16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006277f  00000000  00000000  00047c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa3ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000aa43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037a8 	.word	0x080037a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	080037a8 	.word	0x080037a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b089      	sub	sp, #36	; 0x24
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	240c      	movs	r4, #12
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2314      	movs	r3, #20
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f003 f965 	bl	8003798 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004d4:	2104      	movs	r1, #4
 80004d6:	430a      	orrs	r2, r1
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	2204      	movs	r2, #4
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004ec:	2101      	movs	r1, #1
 80004ee:	430a      	orrs	r2, r1
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	2201      	movs	r2, #1
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_GPIO_Init+0xa8>)
 8000500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_GPIO_Init+0xa8>)
 8000504:	2102      	movs	r1, #2
 8000506:	430a      	orrs	r2, r1
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_GPIO_Init+0xa8>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	2202      	movs	r2, #2
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_MOD_RST_GPIO_Port, CTRL_MOD_RST_Pin, GPIO_PIN_RESET);
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_GPIO_Init+0xac>)
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f000 ff13 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_PMU_WK_GPIO_Port, CTRL_PMU_WK_Pin, GPIO_PIN_SET);
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	01db      	lsls	r3, r3, #7
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <MX_GPIO_Init+0xac>)
 8000528:	2201      	movs	r2, #1
 800052a:	0019      	movs	r1, r3
 800052c:	f000 ff0c 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CTRL_MOD_RST_Pin|CTRL_PMU_WK_Pin;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <MX_GPIO_Init+0xb0>)
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	187b      	adds	r3, r7, r1
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <MX_GPIO_Init+0xac>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fd8b 	bl	800106c <HAL_GPIO_Init>

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b009      	add	sp, #36	; 0x24
 800055c:	bd90      	pop	{r4, r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000
 8000564:	50000400 	.word	0x50000400
 8000568:	00004001 	.word	0x00004001

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fb82 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f932 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f7ff ff9e 	bl	80004b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800057c:	f000 fa9e 	bl	8000abc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(CTRL_PMU_WK_GPIO_Port, CTRL_PMU_WK_Pin, GPIO_PIN_SET);
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	01db      	lsls	r3, r3, #7
 8000584:	4888      	ldr	r0, [pc, #544]	; (80007a8 <main+0x23c>)
 8000586:	2201      	movs	r2, #1
 8000588:	0019      	movs	r1, r3
 800058a:	f000 fedd 	bl	8001348 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fbe2 	bl	8000d58 <HAL_Delay>

  if(HAL_UART_Receive_IT(&hlpuart1, &Rx_data, 1)!= HAL_OK)
 8000594:	4985      	ldr	r1, [pc, #532]	; (80007ac <main+0x240>)
 8000596:	4b86      	ldr	r3, [pc, #536]	; (80007b0 <main+0x244>)
 8000598:	2201      	movs	r2, #1
 800059a:	0018      	movs	r0, r3
 800059c:	f001 feb4 	bl	8002308 <HAL_UART_Receive_IT>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x3c>
  {
	  Error_Handler();
 80005a4:	f000 fa47 	bl	8000a36 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (state)
 80005a8:	4b82      	ldr	r3, [pc, #520]	; (80007b4 <main+0x248>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	d8fb      	bhi.n	80005a8 <main+0x3c>
 80005b0:	009a      	lsls	r2, r3, #2
 80005b2:	4b81      	ldr	r3, [pc, #516]	; (80007b8 <main+0x24c>)
 80005b4:	18d3      	adds	r3, r2, r3
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	469f      	mov	pc, r3
	  {
	  	  case 1:
	  		  if((HAL_GetTick()-lastGetTick)>=1000)
 80005ba:	f000 fbc3 	bl	8000d44 <HAL_GetTick>
 80005be:	0002      	movs	r2, r0
 80005c0:	4b7e      	ldr	r3, [pc, #504]	; (80007bc <main+0x250>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1ad2      	subs	r2, r2, r3
 80005c6:	23fa      	movs	r3, #250	; 0xfa
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d200      	bcs.n	80005d0 <main+0x64>
 80005ce:	e0e0      	b.n	8000792 <main+0x226>
	  		  {
	  			if (Rx_complete == 1)
 80005d0:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <main+0x254>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d000      	beq.n	80005da <main+0x6e>
 80005d8:	e0db      	b.n	8000792 <main+0x226>
				{
	  				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	005a      	lsls	r2, r3, #1
 80005de:	4b79      	ldr	r3, [pc, #484]	; (80007c4 <main+0x258>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 f8d8 	bl	8003798 <memset>
	  				if(HAL_UART_Transmit(&hlpuart1, (uint8_t *)Test, strlen(Test), HAL_MAX_DELAY) != HAL_OK)
 80005e8:	4b77      	ldr	r3, [pc, #476]	; (80007c8 <main+0x25c>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff fd8c 	bl	8000108 <strlen>
 80005f0:	0003      	movs	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	4973      	ldr	r1, [pc, #460]	; (80007c8 <main+0x25c>)
 80005fa:	486d      	ldr	r0, [pc, #436]	; (80007b0 <main+0x244>)
 80005fc:	f001 fddc 	bl	80021b8 <HAL_UART_Transmit>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <main+0x9c>
					{
	  					Error_Handler();
 8000604:	f000 fa17 	bl	8000a36 <Error_Handler>
					}
					lastGetTick=HAL_GetTick();
 8000608:	f000 fb9c 	bl	8000d44 <HAL_GetTick>
 800060c:	0002      	movs	r2, r0
 800060e:	4b6b      	ldr	r3, [pc, #428]	; (80007bc <main+0x250>)
 8000610:	601a      	str	r2, [r3, #0]
					state = 2;
 8000612:	4b68      	ldr	r3, [pc, #416]	; (80007b4 <main+0x248>)
 8000614:	2202      	movs	r2, #2
 8000616:	701a      	strb	r2, [r3, #0]
				}
	  		  }
	  		  break;
 8000618:	e0bb      	b.n	8000792 <main+0x226>
	  	  case 2:
	  		  if((HAL_GetTick()-lastGetTick)>=1000)
 800061a:	f000 fb93 	bl	8000d44 <HAL_GetTick>
 800061e:	0002      	movs	r2, r0
 8000620:	4b66      	ldr	r3, [pc, #408]	; (80007bc <main+0x250>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	23fa      	movs	r3, #250	; 0xfa
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	429a      	cmp	r2, r3
 800062c:	d200      	bcs.n	8000630 <main+0xc4>
 800062e:	e0b2      	b.n	8000796 <main+0x22a>
	  		  {
		  		if (Rx_complete == 1)
 8000630:	4b63      	ldr	r3, [pc, #396]	; (80007c0 <main+0x254>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d000      	beq.n	800063a <main+0xce>
 8000638:	e0ad      	b.n	8000796 <main+0x22a>
				{
		  			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	005a      	lsls	r2, r3, #1
 800063e:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <main+0x258>)
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f8a8 	bl	8003798 <memset>
		  			if(HAL_UART_Transmit(&hlpuart1, (uint8_t *)ati, strlen(ati), HAL_MAX_DELAY) != HAL_OK)
 8000648:	4b60      	ldr	r3, [pc, #384]	; (80007cc <main+0x260>)
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff fd5c 	bl	8000108 <strlen>
 8000650:	0003      	movs	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	495c      	ldr	r1, [pc, #368]	; (80007cc <main+0x260>)
 800065a:	4855      	ldr	r0, [pc, #340]	; (80007b0 <main+0x244>)
 800065c:	f001 fdac 	bl	80021b8 <HAL_UART_Transmit>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <main+0xfc>
		  			{
	  				  Error_Handler();
 8000664:	f000 f9e7 	bl	8000a36 <Error_Handler>
		  			}
		  			lastGetTick=HAL_GetTick();
 8000668:	f000 fb6c 	bl	8000d44 <HAL_GetTick>
 800066c:	0002      	movs	r2, r0
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <main+0x250>)
 8000670:	601a      	str	r2, [r3, #0]
		  			state = 3;
 8000672:	4b50      	ldr	r3, [pc, #320]	; (80007b4 <main+0x248>)
 8000674:	2203      	movs	r2, #3
 8000676:	701a      	strb	r2, [r3, #0]
				}
	  		  }
	  		  break;
 8000678:	e08d      	b.n	8000796 <main+0x22a>
	  	  case 3:
	  		  if((HAL_GetTick()-lastGetTick)>=1000)
 800067a:	f000 fb63 	bl	8000d44 <HAL_GetTick>
 800067e:	0002      	movs	r2, r0
 8000680:	4b4e      	ldr	r3, [pc, #312]	; (80007bc <main+0x250>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	23fa      	movs	r3, #250	; 0xfa
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	429a      	cmp	r2, r3
 800068c:	d200      	bcs.n	8000690 <main+0x124>
 800068e:	e084      	b.n	800079a <main+0x22e>
	  		  {
		  		if (Rx_complete == 1)
 8000690:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <main+0x254>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d000      	beq.n	800069a <main+0x12e>
 8000698:	e07f      	b.n	800079a <main+0x22e>
				{
		  			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	005a      	lsls	r2, r3, #1
 800069e:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <main+0x258>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f003 f878 	bl	8003798 <memset>
		  			if(HAL_UART_Transmit(&hlpuart1, (uint8_t *)IP_Address, strlen(IP_Address), HAL_MAX_DELAY) != HAL_OK)
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <main+0x264>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fd2c 	bl	8000108 <strlen>
 80006b0:	0003      	movs	r3, r0
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	4945      	ldr	r1, [pc, #276]	; (80007d0 <main+0x264>)
 80006ba:	483d      	ldr	r0, [pc, #244]	; (80007b0 <main+0x244>)
 80006bc:	f001 fd7c 	bl	80021b8 <HAL_UART_Transmit>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <main+0x15c>
		  			{
	  				  Error_Handler();
 80006c4:	f000 f9b7 	bl	8000a36 <Error_Handler>
		  			}
		  			lastGetTick=HAL_GetTick();
 80006c8:	f000 fb3c 	bl	8000d44 <HAL_GetTick>
 80006cc:	0002      	movs	r2, r0
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <main+0x250>)
 80006d0:	601a      	str	r2, [r3, #0]
		  			state = 4;
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0x248>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	701a      	strb	r2, [r3, #0]
				}
	  		  }
	  		  break;
 80006d8:	e05f      	b.n	800079a <main+0x22e>
	  	  case 4:
	  		  if((HAL_GetTick()-lastGetTick)>=1000)
 80006da:	f000 fb33 	bl	8000d44 <HAL_GetTick>
 80006de:	0002      	movs	r2, r0
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <main+0x250>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	23fa      	movs	r3, #250	; 0xfa
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d357      	bcc.n	800079e <main+0x232>
	  		  {
		  		if (Rx_complete == 1)
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <main+0x254>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d153      	bne.n	800079e <main+0x232>
				{
		  			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	005a      	lsls	r2, r3, #1
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <main+0x258>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	0018      	movs	r0, r3
 8000700:	f003 f84a 	bl	8003798 <memset>
		  			if(HAL_UART_Transmit(&hlpuart1, (uint8_t *)socket_cmd_allo, strlen(socket_cmd_allo), HAL_MAX_DELAY) != HAL_OK)
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <main+0x268>)
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fcfe 	bl	8000108 <strlen>
 800070c:	0003      	movs	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	2301      	movs	r3, #1
 8000712:	425b      	negs	r3, r3
 8000714:	492f      	ldr	r1, [pc, #188]	; (80007d4 <main+0x268>)
 8000716:	4826      	ldr	r0, [pc, #152]	; (80007b0 <main+0x244>)
 8000718:	f001 fd4e 	bl	80021b8 <HAL_UART_Transmit>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <main+0x1b8>
		  			{
	  				  Error_Handler();
 8000720:	f000 f989 	bl	8000a36 <Error_Handler>
		  			}
		  			lastGetTick=HAL_GetTick();
 8000724:	f000 fb0e 	bl	8000d44 <HAL_GetTick>
 8000728:	0002      	movs	r2, r0
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <main+0x250>)
 800072c:	601a      	str	r2, [r3, #0]
		  			state = 5;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <main+0x248>)
 8000730:	2205      	movs	r2, #5
 8000732:	701a      	strb	r2, [r3, #0]
				}
	  		  }
	  		  break;
 8000734:	e033      	b.n	800079e <main+0x232>
	  	  case 5:
	  		  if((HAL_GetTick()-lastGetTick)>=1000)
 8000736:	f000 fb05 	bl	8000d44 <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <main+0x250>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad2      	subs	r2, r2, r3
 8000742:	23fa      	movs	r3, #250	; 0xfa
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	429a      	cmp	r2, r3
 8000748:	d32b      	bcc.n	80007a2 <main+0x236>
	  		  {
		  		if (Rx_complete == 1)
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <main+0x254>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d127      	bne.n	80007a2 <main+0x236>
				{
		  			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	005a      	lsls	r2, r3, #1
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <main+0x258>)
 8000758:	2100      	movs	r1, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f003 f81c 	bl	8003798 <memset>
		  			if(HAL_UART_Transmit(&hlpuart1, (uint8_t *)socket_cmd_setop, strlen(socket_cmd_setop), HAL_MAX_DELAY) != HAL_OK)
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <main+0x26c>)
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff fcd0 	bl	8000108 <strlen>
 8000768:	0003      	movs	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	2301      	movs	r3, #1
 800076e:	425b      	negs	r3, r3
 8000770:	4919      	ldr	r1, [pc, #100]	; (80007d8 <main+0x26c>)
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <main+0x244>)
 8000774:	f001 fd20 	bl	80021b8 <HAL_UART_Transmit>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <main+0x214>
		  			{
	  				  Error_Handler();
 800077c:	f000 f95b 	bl	8000a36 <Error_Handler>
		  			}
		  			lastGetTick=HAL_GetTick();
 8000780:	f000 fae0 	bl	8000d44 <HAL_GetTick>
 8000784:	0002      	movs	r2, r0
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <main+0x250>)
 8000788:	601a      	str	r2, [r3, #0]
		  			state = 1;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <main+0x248>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
				}
	  		  }
	  		  break;
 8000790:	e007      	b.n	80007a2 <main+0x236>
	  		  break;
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	e708      	b.n	80005a8 <main+0x3c>
	  		  break;
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	e706      	b.n	80005a8 <main+0x3c>
	  		  break;
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	e704      	b.n	80005a8 <main+0x3c>
	  		  break;
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	e702      	b.n	80005a8 <main+0x3c>
	  		  break;
 80007a2:	46c0      	nop			; (mov r8, r8)
	  switch (state)
 80007a4:	e700      	b.n	80005a8 <main+0x3c>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	50000400 	.word	0x50000400
 80007ac:	200001ac 	.word	0x200001ac
 80007b0:	200001b4 	.word	0x200001b4
 80007b4:	20000181 	.word	0x20000181
 80007b8:	080037c0 	.word	0x080037c0
 80007bc:	200001b0 	.word	0x200001b0
 80007c0:	20000180 	.word	0x20000180
 80007c4:	20000080 	.word	0x20000080
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000010 	.word	0x20000010
 80007d4:	20000020 	.word	0x20000020
 80007d8:	2000005c 	.word	0x2000005c

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b099      	sub	sp, #100	; 0x64
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	242c      	movs	r4, #44	; 0x2c
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2334      	movs	r3, #52	; 0x34
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f002 ffd3 	bl	8003798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f2:	2318      	movs	r3, #24
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f002 ffcb 	bl	8003798 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	2318      	movs	r3, #24
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 ffc4 	bl	8003798 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <SystemClock_Config+0xd4>)
 8000816:	401a      	ands	r2, r3
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <SystemClock_Config+0xd0>)
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	0109      	lsls	r1, r1, #4
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2210      	movs	r2, #16
 8000828:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	22a0      	movs	r2, #160	; 0xa0
 800083a:	0212      	lsls	r2, r2, #8
 800083c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	187b      	adds	r3, r7, r1
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fd9c 	bl	8001384 <HAL_RCC_OscConfig>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000850:	f000 f8f1 	bl	8000a36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	2118      	movs	r1, #24
 8000856:	187b      	adds	r3, r7, r1
 8000858:	220f      	movs	r2, #15
 800085a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f8ff 	bl	8001a7c <HAL_RCC_ClockConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000882:	f000 f8d8 	bl	8000a36 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000886:	003b      	movs	r3, r7
 8000888:	2204      	movs	r2, #4
 800088a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800088c:	003b      	movs	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fb15 	bl	8001ec4 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800089e:	f000 f8ca 	bl	8000a36 <Error_Handler>
  }
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b019      	add	sp, #100	; 0x64
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40007000 	.word	0x40007000
 80008b0:	ffffe7ff 	.word	0xffffe7ff

080008b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == LPUART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a52      	ldr	r2, [pc, #328]	; (8000a0c <HAL_UART_RxCpltCallback+0x158>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d000      	beq.n	80008c8 <HAL_UART_RxCpltCallback+0x14>
 80008c6:	e09c      	b.n	8000a02 <HAL_UART_RxCpltCallback+0x14e>
	{
		Rx_complete = 0;
 80008c8:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <HAL_UART_RxCpltCallback+0x15c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		Rx_Buffer[Rx_indx++] = Rx_data;
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	b2d1      	uxtb	r1, r2
 80008d8:	4a4e      	ldr	r2, [pc, #312]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80008da:	7011      	strb	r1, [r2, #0]
 80008dc:	001a      	movs	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <HAL_UART_RxCpltCallback+0x164>)
 80008e0:	7819      	ldrb	r1, [r3, #0]
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 80008e4:	5499      	strb	r1, [r3, r2]
		if (Rx_indx + 1 > sizeof(Rx_Buffer))
 80008e6:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	3301      	adds	r3, #1
 80008ee:	001a      	movs	r2, r3
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d905      	bls.n	8000904 <HAL_UART_RxCpltCallback+0x50>
		{
			Rx_indx = 0;
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
			Rx_complete = 1;
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <HAL_UART_RxCpltCallback+0x15c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
		}
		if (Rx_Buffer[Rx_indx-1] == 0x0a && Rx_Buffer[Rx_indx-2] == 0x0d && Rx_Buffer[Rx_indx-3] == 0x4b && Rx_Buffer[Rx_indx-4] == 0x4f)
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	3b01      	subs	r3, #1
 800090c:	4a43      	ldr	r2, [pc, #268]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800090e:	5cd3      	ldrb	r3, [r2, r3]
 8000910:	2b0a      	cmp	r3, #10
 8000912:	d11d      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x9c>
 8000914:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	3b02      	subs	r3, #2
 800091c:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	2b0d      	cmp	r3, #13
 8000922:	d115      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x9c>
 8000924:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3b03      	subs	r3, #3
 800092c:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	2b4b      	cmp	r3, #75	; 0x4b
 8000932:	d10d      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x9c>
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3b04      	subs	r3, #4
 800093c:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	2b4f      	cmp	r3, #79	; 0x4f
 8000942:	d105      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x9c>
		{
			Rx_indx = 0;
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
			Rx_complete = 1;
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_UART_RxCpltCallback+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
		}
		if (Rx_Buffer[Rx_indx-1] == 0x0a && Rx_Buffer[Rx_indx-2] == 0x0d && Rx_Buffer[Rx_indx-3] == 0x52 && Rx_Buffer[Rx_indx-4] == 0x4f && Rx_Buffer[Rx_indx-5] == 0x52 && Rx_Buffer[Rx_indx-6] == 0x52 && Rx_Buffer[Rx_indx-7] == 0x45)
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	3b01      	subs	r3, #1
 8000958:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	2b0a      	cmp	r3, #10
 800095e:	d135      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	3b02      	subs	r3, #2
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	2b0d      	cmp	r3, #13
 800096e:	d12d      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	3b03      	subs	r3, #3
 8000978:	4a28      	ldr	r2, [pc, #160]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	2b52      	cmp	r3, #82	; 0x52
 800097e:	d125      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3b04      	subs	r3, #4
 8000988:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	2b4f      	cmp	r3, #79	; 0x4f
 800098e:	d11d      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	3b05      	subs	r3, #5
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	2b52      	cmp	r3, #82	; 0x52
 800099e:	d115      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	3b06      	subs	r3, #6
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	2b52      	cmp	r3, #82	; 0x52
 80009ae:	d10d      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	3b07      	subs	r3, #7
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_RxCpltCallback+0x168>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b45      	cmp	r3, #69	; 0x45
 80009be:	d105      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x118>
		{
			Rx_indx = 0;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_UART_RxCpltCallback+0x160>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
			Rx_complete = 1;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_RxCpltCallback+0x15c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_OREFLAG(huart); //clear the overrun flag
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2208      	movs	r2, #8
 80009d2:	621a      	str	r2, [r3, #32]
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST); // Discard the received data
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2108      	movs	r1, #8
 80009e0:	430a      	orrs	r2, r1
 80009e2:	619a      	str	r2, [r3, #24]
		HAL_StatusTypeDef status = HAL_UART_Receive_IT(&hlpuart1, &Rx_data, 1); // Restart Receive
 80009e4:	250f      	movs	r5, #15
 80009e6:	197c      	adds	r4, r7, r5
 80009e8:	490b      	ldr	r1, [pc, #44]	; (8000a18 <HAL_UART_RxCpltCallback+0x164>)
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_UART_RxCpltCallback+0x16c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fc8a 	bl	8002308 <HAL_UART_Receive_IT>
 80009f4:	0003      	movs	r3, r0
 80009f6:	7023      	strb	r3, [r4, #0]
		if (status != HAL_OK)
 80009f8:	197b      	adds	r3, r7, r5
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d000      	beq.n	8000a02 <HAL_UART_RxCpltCallback+0x14e>
		{
			__NOP(); // Only for setting breakpoint
 8000a00:	46c0      	nop			; (mov r8, r8)
		}
    }
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	40004800 	.word	0x40004800
 8000a10:	20000180 	.word	0x20000180
 8000a14:	200001ad 	.word	0x200001ad
 8000a18:	200001ac 	.word	0x200001ac
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	200001b4 	.word	0x200001b4

08000a24 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 __NOP();
 8000a2c:	46c0      	nop			; (mov r8, r8)
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3a:	b672      	cpsid	i
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_MspInit+0x24>)
 8000a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x24>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_MspInit+0x24>)
 8000a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_MspInit+0x24>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0549      	lsls	r1, r1, #21
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f948 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <LPUART1_IRQHandler+0x14>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fc9a 	bl	80023d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	200001b4 	.word	0x200001b4

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <MX_LPUART1_UART_Init+0x58>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ac8:	2296      	movs	r2, #150	; 0x96
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_LPUART1_UART_Init+0x54>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fb08 	bl	8002110 <HAL_UART_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f7ff ff97 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	200001b4 	.word	0x200001b4
 8000b14:	40004800 	.word	0x40004800

08000b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	2414      	movs	r4, #20
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2314      	movs	r3, #20
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f002 fe34 	bl	8003798 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <HAL_UART_MspInit+0xd0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d152      	bne.n	8000be0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	02c9      	lsls	r1, r1, #11
 8000b44:	430a      	orrs	r2, r1
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b4e:	2104      	movs	r1, #4
 8000b50:	430a      	orrs	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	2204      	movs	r2, #4
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_UART_MspInit+0xd4>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2201      	movs	r2, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2202      	movs	r2, #2
 8000b82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2206      	movs	r2, #6
 8000b94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f000 fa65 	bl	800106c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2206      	movs	r2, #6
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	187a      	adds	r2, r7, r1
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa4e 	bl	800106c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	201d      	movs	r0, #29
 8000bd6:	f000 f98f 	bl	8000ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000bda:	201d      	movs	r0, #29
 8000bdc:	f000 f9a1 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b00b      	add	sp, #44	; 0x2c
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40004800 	.word	0x40004800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	50000800 	.word	0x50000800

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <LoopForever+0x6>)
    LDR R1, [R0]
 8000bfa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bfc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <LoopForever+0xa>)
    CMP R1, R2
 8000c00:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c02:	d105      	bne.n	8000c10 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c06:	4913      	ldr	r1, [pc, #76]	; (8000c54 <LoopForever+0x12>)
    STR R1, [R0]
 8000c08:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c0c:	4913      	ldr	r1, [pc, #76]	; (8000c5c <LoopForever+0x1a>)
    STR R1, [R0]
 8000c0e:	6001      	str	r1, [r0, #0]

08000c10 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c12:	4914      	ldr	r1, [pc, #80]	; (8000c64 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <LoopForever+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c28:	4c11      	ldr	r4, [pc, #68]	; (8000c70 <LoopForever+0x2e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c36:	f7ff ff3b 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 fd89 	bl	8003750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fc95 	bl	800056c <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
   ldr   r0, =_estack
 8000c44:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000c48:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c4c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c50:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c54:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c58:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c5c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000c68:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000c6c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000c70:	2000023c 	.word	0x2000023c

08000c74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_IRQHandler>
	...

08000c78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Init+0x3c>)
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f811 	bl	8000cb8 <HAL_InitTick>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e001      	b.n	8000ca6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca2:	f7ff fecd 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cc2:	681c      	ldr	r4, [r3, #0]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_InitTick+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0019      	movs	r1, r3
 8000cca:	23fa      	movs	r3, #250	; 0xfa
 8000ccc:	0098      	lsls	r0, r3, #2
 8000cce:	f7ff fa23 	bl	8000118 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff fa1e 	bl	8000118 <__udivsi3>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f92f 	bl	8000f42 <HAL_SYSTICK_Config>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e00f      	b.n	8000d0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80b      	bhi.n	8000d0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f8fc 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_InitTick+0x64>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b003      	add	sp, #12
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	20000184 	.word	0x20000184
 8000d18:	2000018c 	.word	0x2000018c
 8000d1c:	20000188 	.word	0x20000188

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	18d2      	adds	r2, r2, r3
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	2000018c 	.word	0x2000018c
 8000d40:	20000238 	.word	0x20000238

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000238 	.word	0x20000238

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff0 	bl	8000d44 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001a      	movs	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	f7ff ffe0 	bl	8000d44 <HAL_GetTick>
 8000d84:	0002      	movs	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	2000018c 	.word	0x2000018c

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b7f      	cmp	r3, #127	; 0x7f
 8000db2:	d809      	bhi.n	8000dc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	001a      	movs	r2, r3
 8000dba:	231f      	movs	r3, #31
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_EnableIRQ+0x30>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
  }
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b7f      	cmp	r3, #127	; 0x7f
 8000de8:	d828      	bhi.n	8000e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	33c0      	adds	r3, #192	; 0xc0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	589b      	ldr	r3, [r3, r2]
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0011      	movs	r1, r2
 8000e00:	2203      	movs	r2, #3
 8000e02:	400a      	ands	r2, r1
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	21ff      	movs	r1, #255	; 0xff
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	401a      	ands	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	2303      	movs	r3, #3
 8000e22:	4003      	ands	r3, r0
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	430a      	orrs	r2, r1
 8000e34:	33c0      	adds	r3, #192	; 0xc0
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e3a:	e031      	b.n	8000ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	230f      	movs	r3, #15
 8000e46:	400b      	ands	r3, r1
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	3304      	adds	r3, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001c      	movs	r4, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	4023      	ands	r3, r4
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	430a      	orrs	r2, r1
 8000e96:	3306      	adds	r3, #6
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	18c3      	adds	r3, r0, r3
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	045b      	lsls	r3, r3, #17
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d301      	bcc.n	8000ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e010      	b.n	8000eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SysTick_Config+0x44>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff7c 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x44>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x44>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	210f      	movs	r1, #15
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	0002      	movs	r2, r0
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff33 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ffaf 	bl	8000eb0 <SysTick_Config>
 8000f52:	0003      	movs	r3, r0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2225      	movs	r2, #37	; 0x25
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d008      	beq.n	8000f8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e024      	b.n	8000fd4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	210e      	movs	r1, #14
 8000f96:	438a      	bics	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	438a      	bics	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	221c      	movs	r2, #28
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2225      	movs	r2, #37	; 0x25
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]

    return status;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2225      	movs	r2, #37	; 0x25
 8000ff0:	5c9b      	ldrb	r3, [r3, r2]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d006      	beq.n	8001006 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e02a      	b.n	800105c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	210e      	movs	r1, #14
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	221c      	movs	r2, #28
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	2101      	movs	r1, #1
 8001034:	4091      	lsls	r1, r2
 8001036:	000a      	movs	r2, r1
 8001038:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2225      	movs	r2, #37	; 0x25
 800103e:	2101      	movs	r1, #1
 8001040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2224      	movs	r2, #36	; 0x24
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	0010      	movs	r0, r2
 800105a:	4798      	blx	r3
    }
  }
  return status;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001082:	e149      	b.n	8001318 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x30>
 800109a:	e13a      	b.n	8001312 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x17c>
 80011e6:	e094      	b.n	8001312 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x2c4>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x2c4>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x2c8>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	589b      	ldr	r3, [r3, r2]
 8001200:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	23a0      	movs	r3, #160	; 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	429a      	cmp	r2, r3
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x1de>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a44      	ldr	r2, [pc, #272]	; (8001338 <HAL_GPIO_Init+0x2cc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x1da>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a43      	ldr	r2, [pc, #268]	; (800133c <HAL_GPIO_Init+0x2d0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x1d6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a42      	ldr	r2, [pc, #264]	; (8001340 <HAL_GPIO_Init+0x2d4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x1d2>
 800123a:	2305      	movs	r3, #5
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x1e0>
 800123e:	2306      	movs	r3, #6
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x1e0>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x1e0>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x1e0>
 800124a:	2300      	movs	r3, #0
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	2103      	movs	r1, #3
 8001250:	400a      	ands	r2, r1
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	; (8001334 <HAL_GPIO_Init+0x2c8>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	4013      	ands	r3, r2
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	035b      	lsls	r3, r3, #13
 80012d6:	4013      	ands	r3, r2
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43da      	mvns	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	039b      	lsls	r3, r3, #14
 8001300:	4013      	ands	r3, r2
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	40da      	lsrs	r2, r3
 8001320:	1e13      	subs	r3, r2, #0
 8001322:	d000      	beq.n	8001326 <HAL_GPIO_Init+0x2ba>
 8001324:	e6ae      	b.n	8001084 <HAL_GPIO_Init+0x18>
  }
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b006      	add	sp, #24
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	50000400 	.word	0x50000400
 800133c:	50000800 	.word	0x50000800
 8001340:	50001c00 	.word	0x50001c00
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	0008      	movs	r0, r1
 8001352:	0011      	movs	r1, r2
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	801a      	strh	r2, [r3, #0]
 800135a:	1c7b      	adds	r3, r7, #1
 800135c:	1c0a      	adds	r2, r1, #0
 800135e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	1c7b      	adds	r3, r7, #1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001372:	1cbb      	adds	r3, r7, #2
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f000 fb6c 	bl	8001a70 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001398:	4bc8      	ldr	r3, [pc, #800]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	220c      	movs	r2, #12
 800139e:	4013      	ands	r3, r2
 80013a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a2:	4bc6      	ldr	r3, [pc, #792]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x36>
 80013b8:	e07d      	b.n	80014b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d007      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d112      	bne.n	80013ec <HAL_RCC_OscConfig+0x68>
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d10d      	bne.n	80013ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4bba      	ldr	r3, [pc, #744]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	029b      	lsls	r3, r3, #10
 80013d8:	4013      	ands	r3, r2
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x5a>
 80013dc:	e06a      	b.n	80014b4 <HAL_RCC_OscConfig+0x130>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d166      	bne.n	80014b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f000 fb42 	bl	8001a70 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x84>
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4baf      	ldr	r3, [pc, #700]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0249      	lsls	r1, r1, #9
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e027      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	02db      	lsls	r3, r3, #11
 8001410:	429a      	cmp	r2, r3
 8001412:	d10e      	bne.n	8001432 <HAL_RCC_OscConfig+0xae>
 8001414:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	02c9      	lsls	r1, r1, #11
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0249      	lsls	r1, r1, #9
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e012      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 8001432:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4ba1      	ldr	r3, [pc, #644]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001438:	49a1      	ldr	r1, [pc, #644]	; (80016c0 <HAL_RCC_OscConfig+0x33c>)
 800143a:	400a      	ands	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	4b9f      	ldr	r3, [pc, #636]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	025b      	lsls	r3, r3, #9
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4b9b      	ldr	r3, [pc, #620]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001452:	499c      	ldr	r1, [pc, #624]	; (80016c4 <HAL_RCC_OscConfig+0x340>)
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d014      	beq.n	800148a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc70 	bl	8000d44 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146a:	f7ff fc6b 	bl	8000d44 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	; 0x64
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e2f9      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0xe6>
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fc5b 	bl	8000d44 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fc56 	bl	8000d44 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e2e4      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	4013      	ands	r3, r2
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x110>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d100      	bne.n	80014c2 <HAL_RCC_OscConfig+0x13e>
 80014c0:	e099      	b.n	80015f6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	2220      	movs	r2, #32
 80014cc:	4013      	ands	r3, r2
 80014ce:	d009      	beq.n	80014e4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014d0:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80014d6:	2120      	movs	r1, #32
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	2220      	movs	r2, #32
 80014e0:	4393      	bics	r3, r2
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b0c      	cmp	r3, #12
 80014ee:	d13e      	bne.n	800156e <HAL_RCC_OscConfig+0x1ea>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d13b      	bne.n	800156e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014f6:	4b71      	ldr	r3, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2204      	movs	r2, #4
 80014fc:	4013      	ands	r3, r2
 80014fe:	d004      	beq.n	800150a <HAL_RCC_OscConfig+0x186>
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2b2      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x344>)
 8001510:	4013      	ands	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	021a      	lsls	r2, r3, #8
 800151a:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2209      	movs	r2, #9
 8001526:	4393      	bics	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800152c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001532:	f000 fbeb 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001536:	0001      	movs	r1, r0
 8001538:	4b60      	ldr	r3, [pc, #384]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	220f      	movs	r2, #15
 8001540:	4013      	ands	r3, r2
 8001542:	4a62      	ldr	r2, [pc, #392]	; (80016cc <HAL_RCC_OscConfig+0x348>)
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	000a      	movs	r2, r1
 8001548:	40da      	lsrs	r2, r3
 800154a:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x34c>)
 800154c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800154e:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x350>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2513      	movs	r5, #19
 8001554:	197c      	adds	r4, r7, r5
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <HAL_InitTick>
 800155c:	0003      	movs	r3, r0
 800155e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001560:	197b      	adds	r3, r7, r5
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d046      	beq.n	80015f6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001568:	197b      	adds	r3, r7, r5
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	e280      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	2b00      	cmp	r3, #0
 8001572:	d027      	beq.n	80015c4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2209      	movs	r2, #9
 800157a:	4393      	bics	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fbdd 	bl	8000d44 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbd8 	bl	8000d44 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e266      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a2:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f1      	beq.n	8001590 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_RCC_OscConfig+0x344>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	021a      	lsls	r2, r3, #8
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	e018      	b.n	80015f6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fbb8 	bl	8000d44 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fbb3 	bl	8000d44 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e241      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2204      	movs	r2, #4
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f1      	bne.n	80015da <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2210      	movs	r2, #16
 80015fc:	4013      	ands	r3, r2
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x27e>
 8001600:	e0a1      	b.n	8001746 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d140      	bne.n	800168a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x29c>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e227      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <HAL_RCC_OscConfig+0x354>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	0a19      	lsrs	r1, r3, #8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	061a      	lsls	r2, r3, #24
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	0b5b      	lsrs	r3, r3, #13
 800164e:	3301      	adds	r3, #1
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	0212      	lsls	r2, r2, #8
 8001654:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	210f      	movs	r1, #15
 800165e:	400b      	ands	r3, r1
 8001660:	491a      	ldr	r1, [pc, #104]	; (80016cc <HAL_RCC_OscConfig+0x348>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x34c>)
 8001668:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_RCC_OscConfig+0x350>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2513      	movs	r5, #19
 8001670:	197c      	adds	r4, r7, r5
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fb20 	bl	8000cb8 <HAL_InitTick>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800167c:	197b      	adds	r3, r7, r5
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d060      	beq.n	8001746 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001684:	197b      	adds	r3, r7, r5
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	e1f2      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03f      	beq.n	8001712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x338>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0049      	lsls	r1, r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb50 	bl	8000d44 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb4b 	bl	8000d44 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d911      	bls.n	80016dc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1d9      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	fffbffff 	.word	0xfffbffff
 80016c8:	ffffe0ff 	.word	0xffffe0ff
 80016cc:	080037d8 	.word	0x080037d8
 80016d0:	20000184 	.word	0x20000184
 80016d4:	20000188 	.word	0x20000188
 80016d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016dc:	4bc9      	ldr	r3, [pc, #804]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d0e0      	beq.n	80016aa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e8:	4bc6      	ldr	r3, [pc, #792]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4ac6      	ldr	r2, [pc, #792]	; (8001a08 <HAL_RCC_OscConfig+0x684>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	0019      	movs	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	4bc3      	ldr	r3, [pc, #780]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4bc1      	ldr	r3, [pc, #772]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	0a19      	lsrs	r1, r3, #8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	061a      	lsls	r2, r3, #24
 800170a:	4bbe      	ldr	r3, [pc, #760]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	e019      	b.n	8001746 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001712:	4bbc      	ldr	r3, [pc, #752]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4bbb      	ldr	r3, [pc, #748]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001718:	49bc      	ldr	r1, [pc, #752]	; (8001a0c <HAL_RCC_OscConfig+0x688>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb11 	bl	8000d44 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001728:	f7ff fb0c 	bl	8000d44 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e19a      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800173a:	4bb2      	ldr	r3, [pc, #712]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2208      	movs	r2, #8
 800174c:	4013      	ands	r3, r2
 800174e:	d036      	beq.n	80017be <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d019      	beq.n	800178c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800175a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175c:	4ba9      	ldr	r3, [pc, #676]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800175e:	2101      	movs	r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff faee 	bl	8000d44 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fae9 	bl	8000d44 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e177      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d0f1      	beq.n	800176e <HAL_RCC_OscConfig+0x3ea>
 800178a:	e018      	b.n	80017be <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178c:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800178e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001790:	4b9c      	ldr	r3, [pc, #624]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fad4 	bl	8000d44 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff facf 	bl	8000d44 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e15d      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b4:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80017b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f1      	bne.n	80017a2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2204      	movs	r2, #4
 80017c4:	4013      	ands	r3, r2
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_OscConfig+0x446>
 80017c8:	e0ae      	b.n	8001928 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2023      	movs	r0, #35	; 0x23
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80017d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	4013      	ands	r3, r2
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b89      	ldr	r3, [pc, #548]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80017e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0549      	lsls	r1, r1, #21
 80017e8:	430a      	orrs	r2, r1
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017ec:	183b      	adds	r3, r7, r0
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <HAL_RCC_OscConfig+0x68c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <HAL_RCC_OscConfig+0x68c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b83      	ldr	r3, [pc, #524]	; (8001a10 <HAL_RCC_OscConfig+0x68c>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0049      	lsls	r1, r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180c:	f7ff fa9a 	bl	8000d44 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff fa95 	bl	8000d44 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e123      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <HAL_RCC_OscConfig+0x68c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4cc>
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0049      	lsls	r1, r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	651a      	str	r2, [r3, #80]	; 0x50
 800184e:	e031      	b.n	80018b4 <HAL_RCC_OscConfig+0x530>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x4ee>
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800185a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800185e:	496b      	ldr	r1, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x688>)
 8001860:	400a      	ands	r2, r1
 8001862:	651a      	str	r2, [r3, #80]	; 0x50
 8001864:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800186a:	496a      	ldr	r1, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x690>)
 800186c:	400a      	ands	r2, r1
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
 8001870:	e020      	b.n	80018b4 <HAL_RCC_OscConfig+0x530>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	23a0      	movs	r3, #160	; 0xa0
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	429a      	cmp	r2, r3
 800187c:	d10e      	bne.n	800189c <HAL_RCC_OscConfig+0x518>
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	430a      	orrs	r2, r1
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
 800188c:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800188e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	0049      	lsls	r1, r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x530>
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800189e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80018a2:	495a      	ldr	r1, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x688>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	651a      	str	r2, [r3, #80]	; 0x50
 80018a8:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80018aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ac:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80018ae:	4959      	ldr	r1, [pc, #356]	; (8001a14 <HAL_RCC_OscConfig+0x690>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d015      	beq.n	80018e8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa42 	bl	8000d44 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c4:	e009      	b.n	80018da <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff fa3d 	bl	8000d44 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_RCC_OscConfig+0x694>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0ca      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80018dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0ef      	beq.n	80018c6 <HAL_RCC_OscConfig+0x542>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa2c 	bl	8000d44 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f0:	e009      	b.n	8001906 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fa27 	bl	8000d44 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	4a46      	ldr	r2, [pc, #280]	; (8001a18 <HAL_RCC_OscConfig+0x694>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0b4      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001912:	2323      	movs	r3, #35	; 0x23
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800191e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001922:	493e      	ldr	r1, [pc, #248]	; (8001a1c <HAL_RCC_OscConfig+0x698>)
 8001924:	400a      	ands	r2, r1
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2b00      	cmp	r3, #0
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x5ae>
 8001930:	e09d      	b.n	8001a6e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x5b6>
 8001938:	e076      	b.n	8001a28 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b02      	cmp	r3, #2
 8001940:	d145      	bne.n	80019ce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001948:	4935      	ldr	r1, [pc, #212]	; (8001a20 <HAL_RCC_OscConfig+0x69c>)
 800194a:	400a      	ands	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff f9f9 	bl	8000d44 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f9f4 	bl	8000d44 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e082      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	4013      	ands	r3, r2
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x6a0>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	431a      	orrs	r2, r3
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001992:	430a      	orrs	r2, r1
 8001994:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0449      	lsls	r1, r1, #17
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f9ce 	bl	8000d44 <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f9c9 	bl	8000d44 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e057      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	049b      	lsls	r3, r3, #18
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x62a>
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <HAL_RCC_OscConfig+0x69c>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f9b3 	bl	8000d44 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f9ae 	bl	8000d44 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e03c      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_OscConfig+0x680>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x660>
 8001a02:	e034      	b.n	8001a6e <HAL_RCC_OscConfig+0x6ea>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	ffff1fff 	.word	0xffff1fff
 8001a0c:	fffffeff 	.word	0xfffffeff
 8001a10:	40007000 	.word	0x40007000
 8001a14:	fffffbff 	.word	0xfffffbff
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	efffffff 	.word	0xefffffff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x6f4>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	401a      	ands	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	23f0      	movs	r3, #240	; 0xf0
 8001a4e:	039b      	lsls	r3, r3, #14
 8001a50:	401a      	ands	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b00a      	add	sp, #40	; 0x28
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e128      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b96      	ldr	r3, [pc, #600]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d91e      	bls.n	8001adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b93      	ldr	r3, [pc, #588]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f948 	bl	8000d44 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f943 	bl	8000d44 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e109      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b87      	ldr	r3, [pc, #540]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae6:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	22f0      	movs	r2, #240	; 0xf0
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x8a>
 8001b04:	e089      	b.n	8001c1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	4013      	ands	r3, r2
 8001b18:	d120      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0e1      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	049b      	lsls	r3, r3, #18
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d114      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0d5      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	4013      	ands	r3, r2
 8001b46:	d109      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0ca      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b4c:	4b69      	ldr	r3, [pc, #420]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0c2      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2203      	movs	r2, #3
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f8e8 	bl	8000d44 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f8df 	bl	8000d44 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0a5      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d1ef      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x106>
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d111      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7ff f8c9 	bl	8000d44 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e08f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_ClockConfig+0x132>
 8001bce:	e024      	b.n	8001c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11b      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7ff f8b3 	bl	8000d44 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e079      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d1ef      	bne.n	8001bda <HAL_RCC_ClockConfig+0x15e>
 8001bfa:	e00e      	b.n	8001c1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f8a2 	bl	8000d44 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e068      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c10:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d21e      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c3a:	f7ff f883 	bl	8000d44 <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	e009      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f87e 	bl	8000d44 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e044      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x27c>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_RCC_ClockConfig+0x280>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00da      	lsls	r2, r3, #3
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca4:	f000 f832 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x278>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_RCC_ClockConfig+0x284>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_ClockConfig+0x288>)
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_ClockConfig+0x28c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	250b      	movs	r5, #11
 8001cc6:	197c      	adds	r4, r7, r5
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7fe fff5 	bl	8000cb8 <HAL_InitTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cd2:	197b      	adds	r3, r7, r5
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cda:	197b      	adds	r3, r7, r5
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffff8ff 	.word	0xfffff8ff
 8001cfc:	ffffc7ff 	.word	0xffffc7ff
 8001d00:	080037d8 	.word	0x080037d8
 8001d04:	20000184 	.word	0x20000184
 8001d08:	20000188 	.word	0x20000188

08001d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b08e      	sub	sp, #56	; 0x38
 8001d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d12:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d014      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x40>
 8001d22:	d900      	bls.n	8001d26 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d24:	e07b      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x112>
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x24>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2e:	e076      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d30:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	4013      	ands	r3, r2
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d3e:	e07c      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x140>)
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	e079      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d4a:	e076      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	0c9a      	lsrs	r2, r3, #18
 8001d50:	230f      	movs	r3, #15
 8001d52:	401a      	ands	r2, r3
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	0d9a      	lsrs	r2, r3, #22
 8001d5e:	2303      	movs	r3, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d01a      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	69b8      	ldr	r0, [r7, #24]
 8001d80:	69f9      	ldr	r1, [r7, #28]
 8001d82:	f7fe fa75 	bl	8000270 <__aeabi_lmul>
 8001d86:	0002      	movs	r2, r0
 8001d88:	000b      	movs	r3, r1
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f7fe fa49 	bl	8000230 <__aeabi_uldivmod>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	000b      	movs	r3, r1
 8001da2:	0013      	movs	r3, r2
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	e037      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2210      	movs	r2, #16
 8001dae:	4013      	ands	r3, r2
 8001db0:	d01a      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	68b8      	ldr	r0, [r7, #8]
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	f7fe fa55 	bl	8000270 <__aeabi_lmul>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	000b      	movs	r3, r1
 8001dca:	0010      	movs	r0, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f7fe fa29 	bl	8000230 <__aeabi_uldivmod>
 8001dde:	0002      	movs	r2, r0
 8001de0:	000b      	movs	r3, r1
 8001de2:	0013      	movs	r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	e017      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	0018      	movs	r0, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	0019      	movs	r1, r3
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x140>)
 8001df2:	2300      	movs	r3, #0
 8001df4:	f7fe fa3c 	bl	8000270 <__aeabi_lmul>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	001c      	movs	r4, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	001d      	movs	r5, r3
 8001e08:	0022      	movs	r2, r4
 8001e0a:	002b      	movs	r3, r5
 8001e0c:	f7fe fa10 	bl	8000230 <__aeabi_uldivmod>
 8001e10:	0002      	movs	r2, r0
 8001e12:	000b      	movs	r3, r1
 8001e14:	0013      	movs	r3, r2
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e1c:	e00d      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	2207      	movs	r2, #7
 8001e26:	4013      	ands	r3, r2
 8001e28:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e38:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b00e      	add	sp, #56	; 0x38
 8001e42:	bdb0      	pop	{r4, r5, r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	003d0900 	.word	0x003d0900
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	080037f0 	.word	0x080037f0

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	20000184 	.word	0x20000184

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff2 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e74:	0001      	movs	r1, r0
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	4013      	ands	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	40d9      	lsrs	r1, r3
 8001e86:	000b      	movs	r3, r1
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080037e8 	.word	0x080037e8

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	0001      	movs	r1, r0
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	4013      	ands	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	40d9      	lsrs	r1, r3
 8001eb2:	000b      	movs	r3, r1
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080037e8 	.word	0x080037e8

08001ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2017      	movs	r0, #23
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ede:	e0c2      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	055b      	lsls	r3, r3, #21
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d109      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef0:	4b7d      	ldr	r3, [pc, #500]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0549      	lsls	r1, r1, #21
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001efa:	183b      	adds	r3, r7, r0
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d11a      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b77      	ldr	r3, [pc, #476]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0049      	lsls	r1, r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff13 	bl	8000d44 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	e008      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f24:	f7fe ff0e 	bl	8000d44 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0d4      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b6d      	ldr	r3, [pc, #436]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f42:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	23c0      	movs	r3, #192	; 0xc0
 8001f54:	039b      	lsls	r3, r3, #14
 8001f56:	4013      	ands	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d013      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	23c0      	movs	r3, #192	; 0xc0
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	401a      	ands	r2, r3
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10a      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	401a      	ands	r2, r3
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0ac      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	029b      	lsls	r3, r3, #10
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03b      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d033      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2220      	movs	r2, #32
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d02e      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	0309      	lsls	r1, r1, #12
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fce:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd0:	4948      	ldr	r1, [pc, #288]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d014      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fead 	bl	8000d44 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fea8 	bl	8000d44 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	401a      	ands	r2, r3
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	429a      	cmp	r2, r3
 8002020:	d10c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	039b      	lsls	r3, r3, #14
 8002034:	401a      	ands	r2, r3
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800203e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	23c0      	movs	r3, #192	; 0xc0
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	401a      	ands	r2, r3
 800204a:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800204c:	430a      	orrs	r2, r1
 800204e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002050:	2317      	movs	r3, #23
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002060:	4927      	ldr	r1, [pc, #156]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002062:	400a      	ands	r2, r1
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	220c      	movs	r2, #12
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002080:	430a      	orrs	r2, r1
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2208      	movs	r2, #8
 80020a8:	4013      	ands	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	4013      	ands	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b006      	add	sp, #24
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
 80020f0:	fffcffff 	.word	0xfffcffff
 80020f4:	fff7ffff 	.word	0xfff7ffff
 80020f8:	00001388 	.word	0x00001388
 80020fc:	ffcfffff 	.word	0xffcfffff
 8002100:	efffffff 	.word	0xefffffff
 8002104:	fffff3ff 	.word	0xfffff3ff
 8002108:	ffffcfff 	.word	0xffffcfff
 800210c:	fff3ffff 	.word	0xfff3ffff

08002110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e044      	b.n	80021ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2274      	movs	r2, #116	; 0x74
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe fcef 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2224      	movs	r2, #36	; 0x24
 800213e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fc2e 	bl	80029b4 <UART_SetConfig>
 8002158:	0003      	movs	r3, r0
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e024      	b.n	80021ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fe6b 	bl	8002e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	490d      	ldr	r1, [pc, #52]	; (80021b4 <HAL_UART_Init+0xa4>)
 800217e:	400a      	ands	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	212a      	movs	r1, #42	; 0x2a
 800218e:	438a      	bics	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 ff03 	bl	8002fb0 <UART_CheckIdleState>
 80021aa:	0003      	movs	r3, r0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	ffffb7ff 	.word	0xffffb7ff

080021b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	1dbb      	adds	r3, r7, #6
 80021c6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d000      	beq.n	80021d2 <HAL_UART_Transmit+0x1a>
 80021d0:	e095      	b.n	80022fe <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_UART_Transmit+0x28>
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e08d      	b.n	8002300 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	015b      	lsls	r3, r3, #5
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d109      	bne.n	8002204 <HAL_UART_Transmit+0x4c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	d001      	beq.n	8002204 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e07d      	b.n	8002300 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2274      	movs	r2, #116	; 0x74
 8002208:	5c9b      	ldrb	r3, [r3, r2]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_UART_Transmit+0x5a>
 800220e:	2302      	movs	r3, #2
 8002210:	e076      	b.n	8002300 <HAL_UART_Transmit+0x148>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2274      	movs	r2, #116	; 0x74
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	2100      	movs	r1, #0
 8002220:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002228:	f7fe fd8c 	bl	8000d44 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1dba      	adds	r2, r7, #6
 8002234:	2150      	movs	r1, #80	; 0x50
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1dba      	adds	r2, r7, #6
 800223e:	2152      	movs	r1, #82	; 0x52
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	429a      	cmp	r2, r3
 800224e:	d108      	bne.n	8002262 <HAL_UART_Transmit+0xaa>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	e003      	b.n	800226a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2274      	movs	r2, #116	; 0x74
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002272:	e02c      	b.n	80022ce <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	0013      	movs	r3, r2
 800227e:	2200      	movs	r2, #0
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	f000 fedd 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e038      	b.n	8002300 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	05d2      	lsls	r2, r2, #23
 80022a0:	0dd2      	lsrs	r2, r2, #23
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	3302      	adds	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e007      	b.n	80022bc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2252      	movs	r2, #82	; 0x52
 80022c0:	5a9b      	ldrh	r3, [r3, r2]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b299      	uxth	r1, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2252      	movs	r2, #82	; 0x52
 80022cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2252      	movs	r2, #82	; 0x52
 80022d2:	5a9b      	ldrh	r3, [r3, r2]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1cc      	bne.n	8002274 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	0013      	movs	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	f000 feaa 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e005      	b.n	8002300 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b008      	add	sp, #32
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231a:	2b20      	cmp	r3, #32
 800231c:	d155      	bne.n	80023ca <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_UART_Receive_IT+0x24>
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04d      	b.n	80023cc <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	015b      	lsls	r3, r3, #5
 8002338:	429a      	cmp	r2, r3
 800233a:	d109      	bne.n	8002350 <HAL_UART_Receive_IT+0x48>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d001      	beq.n	8002350 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e03d      	b.n	80023cc <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2274      	movs	r2, #116	; 0x74
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_UART_Receive_IT+0x56>
 800235a:	2302      	movs	r3, #2
 800235c:	e036      	b.n	80023cc <HAL_UART_Receive_IT+0xc4>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2274      	movs	r2, #116	; 0x74
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_UART_Receive_IT+0xcc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d020      	beq.n	80023b8 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	4013      	ands	r3, r2
 8002382:	d019      	beq.n	80023b8 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002384:	f3ef 8310 	mrs	r3, PRIMASK
 8002388:	613b      	str	r3, [r7, #16]
  return(result);
 800238a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	04c9      	lsls	r1, r1, #19
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f383 8810 	msr	PRIMASK, r3
}
 80023b6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 ff01 	bl	80031c8 <UART_Start_Receive_IT>
 80023c6:	0003      	movs	r3, r0
 80023c8:	e000      	b.n	80023cc <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b008      	add	sp, #32
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40004800 	.word	0x40004800

080023d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b0ab      	sub	sp, #172	; 0xac
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	22a4      	movs	r2, #164	; 0xa4
 80023e8:	18b9      	adds	r1, r7, r2
 80023ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	20a0      	movs	r0, #160	; 0xa0
 80023f4:	1839      	adds	r1, r7, r0
 80023f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	219c      	movs	r1, #156	; 0x9c
 8002400:	1879      	adds	r1, r7, r1
 8002402:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002404:	0011      	movs	r1, r2
 8002406:	18bb      	adds	r3, r7, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a99      	ldr	r2, [pc, #612]	; (8002670 <HAL_UART_IRQHandler+0x298>)
 800240c:	4013      	ands	r3, r2
 800240e:	2298      	movs	r2, #152	; 0x98
 8002410:	18bc      	adds	r4, r7, r2
 8002412:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002414:	18bb      	adds	r3, r7, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d114      	bne.n	8002446 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800241c:	187b      	adds	r3, r7, r1
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	4013      	ands	r3, r2
 8002424:	d00f      	beq.n	8002446 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002426:	183b      	adds	r3, r7, r0
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2220      	movs	r2, #32
 800242c:	4013      	ands	r3, r2
 800242e:	d00a      	beq.n	8002446 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002434:	2b00      	cmp	r3, #0
 8002436:	d100      	bne.n	800243a <HAL_UART_IRQHandler+0x62>
 8002438:	e298      	b.n	800296c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	0010      	movs	r0, r2
 8002442:	4798      	blx	r3
      }
      return;
 8002444:	e292      	b.n	800296c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002446:	2398      	movs	r3, #152	; 0x98
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d100      	bne.n	8002452 <HAL_UART_IRQHandler+0x7a>
 8002450:	e114      	b.n	800267c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002452:	239c      	movs	r3, #156	; 0x9c
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	d106      	bne.n	800246c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800245e:	23a0      	movs	r3, #160	; 0xa0
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a83      	ldr	r2, [pc, #524]	; (8002674 <HAL_UART_IRQHandler+0x29c>)
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_UART_IRQHandler+0x94>
 800246a:	e107      	b.n	800267c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800246c:	23a4      	movs	r3, #164	; 0xa4
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d012      	beq.n	800249e <HAL_UART_IRQHandler+0xc6>
 8002478:	23a0      	movs	r3, #160	; 0xa0
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4013      	ands	r3, r2
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	589b      	ldr	r3, [r3, r2]
 8002494:	2201      	movs	r2, #1
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d011      	beq.n	80024ce <HAL_UART_IRQHandler+0xf6>
 80024aa:	239c      	movs	r3, #156	; 0x9c
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00b      	beq.n	80024ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2202      	movs	r2, #2
 80024bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	589b      	ldr	r3, [r3, r2]
 80024c4:	2204      	movs	r2, #4
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ce:	23a4      	movs	r3, #164	; 0xa4
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2204      	movs	r2, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d011      	beq.n	80024fe <HAL_UART_IRQHandler+0x126>
 80024da:	239c      	movs	r3, #156	; 0x9c
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	2202      	movs	r2, #2
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	4013      	ands	r3, r2
 8002508:	d017      	beq.n	800253a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800250a:	23a0      	movs	r3, #160	; 0xa0
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2220      	movs	r2, #32
 8002512:	4013      	ands	r3, r2
 8002514:	d105      	bne.n	8002522 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002516:	239c      	movs	r3, #156	; 0x9c
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002520:	d00b      	beq.n	800253a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2208      	movs	r2, #8
 8002528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	589b      	ldr	r3, [r3, r2]
 8002530:	2208      	movs	r2, #8
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800253a:	23a4      	movs	r3, #164	; 0xa4
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4013      	ands	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_UART_IRQHandler+0x198>
 8002548:	23a0      	movs	r3, #160	; 0xa0
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	04db      	lsls	r3, r3, #19
 8002552:	4013      	ands	r3, r2
 8002554:	d00c      	beq.n	8002570 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	589b      	ldr	r3, [r3, r2]
 8002566:	2220      	movs	r2, #32
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d100      	bne.n	800257c <HAL_UART_IRQHandler+0x1a4>
 800257a:	e1f9      	b.n	8002970 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800257c:	23a4      	movs	r3, #164	; 0xa4
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002588:	23a0      	movs	r3, #160	; 0xa0
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	4013      	ands	r3, r2
 8002592:	d008      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	0010      	movs	r0, r2
 80025a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	589b      	ldr	r3, [r3, r2]
 80025ac:	2194      	movs	r1, #148	; 0x94
 80025ae:	187a      	adds	r2, r7, r1
 80025b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d004      	beq.n	80025ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2228      	movs	r2, #40	; 0x28
 80025c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c8:	d047      	beq.n	800265a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 feab 	bl	8003328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	4013      	ands	r3, r2
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d137      	bne.n	8002650 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e0:	f3ef 8310 	mrs	r3, PRIMASK
 80025e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e8:	2090      	movs	r0, #144	; 0x90
 80025ea:	183a      	adds	r2, r7, r0
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f4:	f383 8810 	msr	PRIMASK, r3
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2140      	movs	r1, #64	; 0x40
 8002606:	438a      	bics	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	183b      	adds	r3, r7, r0
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002612:	f383 8810 	msr	PRIMASK, r3
}
 8002616:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_UART_IRQHandler+0x2a0>)
 8002626:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fcd5 	bl	8000fdc <HAL_DMA_Abort_IT>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d01a      	beq.n	800266c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	0018      	movs	r0, r3
 8002642:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	e012      	b.n	800266c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f99f 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264e:	e00d      	b.n	800266c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f99a 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e008      	b.n	800266c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f995 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	2100      	movs	r1, #0
 8002668:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800266a:	e181      	b.n	8002970 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	46c0      	nop			; (mov r8, r8)
    return;
 800266e:	e17f      	b.n	8002970 <HAL_UART_IRQHandler+0x598>
 8002670:	0000080f 	.word	0x0000080f
 8002674:	04000120 	.word	0x04000120
 8002678:	080033ed 	.word	0x080033ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002680:	2b01      	cmp	r3, #1
 8002682:	d000      	beq.n	8002686 <HAL_UART_IRQHandler+0x2ae>
 8002684:	e133      	b.n	80028ee <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002686:	23a4      	movs	r3, #164	; 0xa4
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	d100      	bne.n	8002694 <HAL_UART_IRQHandler+0x2bc>
 8002692:	e12c      	b.n	80028ee <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002694:	23a0      	movs	r3, #160	; 0xa0
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2210      	movs	r2, #16
 800269c:	4013      	ands	r3, r2
 800269e:	d100      	bne.n	80026a2 <HAL_UART_IRQHandler+0x2ca>
 80026a0:	e125      	b.n	80028ee <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2240      	movs	r2, #64	; 0x40
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d000      	beq.n	80026ba <HAL_UART_IRQHandler+0x2e2>
 80026b8:	e09d      	b.n	80027f6 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	217e      	movs	r1, #126	; 0x7e
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d100      	bne.n	80026d2 <HAL_UART_IRQHandler+0x2fa>
 80026d0:	e150      	b.n	8002974 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2258      	movs	r2, #88	; 0x58
 80026d6:	5a9b      	ldrh	r3, [r3, r2]
 80026d8:	187a      	adds	r2, r7, r1
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d300      	bcc.n	80026e2 <HAL_UART_IRQHandler+0x30a>
 80026e0:	e148      	b.n	8002974 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	187a      	adds	r2, r7, r1
 80026e6:	215a      	movs	r1, #90	; 0x5a
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2220      	movs	r2, #32
 80026f6:	4013      	ands	r3, r2
 80026f8:	d16e      	bne.n	80027d8 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	67bb      	str	r3, [r7, #120]	; 0x78
 8002704:	2301      	movs	r3, #1
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	499a      	ldr	r1, [pc, #616]	; (8002984 <HAL_UART_IRQHandler+0x5ac>)
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	677b      	str	r3, [r7, #116]	; 0x74
 8002736:	2301      	movs	r3, #1
 8002738:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275e:	f3ef 8310 	mrs	r3, PRIMASK
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
 8002768:	2301      	movs	r3, #1
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276e:	f383 8810 	msr	PRIMASK, r3
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	438a      	bics	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279c:	f3ef 8310 	mrs	r3, PRIMASK
 80027a0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a6:	2301      	movs	r3, #1
 80027a8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2110      	movs	r1, #16
 80027be:	438a      	bics	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fe fbc2 	bl	8000f5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2258      	movs	r2, #88	; 0x58
 80027dc:	5a9a      	ldrh	r2, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	215a      	movs	r1, #90	; 0x5a
 80027e2:	5a5b      	ldrh	r3, [r3, r1]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f8d4 	bl	800299c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027f4:	e0be      	b.n	8002974 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2258      	movs	r2, #88	; 0x58
 80027fa:	5a99      	ldrh	r1, [r3, r2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	225a      	movs	r2, #90	; 0x5a
 8002800:	5a9b      	ldrh	r3, [r3, r2]
 8002802:	b29a      	uxth	r2, r3
 8002804:	208e      	movs	r0, #142	; 0x8e
 8002806:	183b      	adds	r3, r7, r0
 8002808:	1a8a      	subs	r2, r1, r2
 800280a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	225a      	movs	r2, #90	; 0x5a
 8002810:	5a9b      	ldrh	r3, [r3, r2]
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d100      	bne.n	800281a <HAL_UART_IRQHandler+0x442>
 8002818:	e0ae      	b.n	8002978 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800281a:	183b      	adds	r3, r7, r0
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d100      	bne.n	8002824 <HAL_UART_IRQHandler+0x44c>
 8002822:	e0a9      	b.n	8002978 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002824:	f3ef 8310 	mrs	r3, PRIMASK
 8002828:	60fb      	str	r3, [r7, #12]
  return(result);
 800282a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282c:	2488      	movs	r4, #136	; 0x88
 800282e:	193a      	adds	r2, r7, r4
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	2301      	movs	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	494f      	ldr	r1, [pc, #316]	; (8002988 <HAL_UART_IRQHandler+0x5b0>)
 800284a:	400a      	ands	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	193b      	adds	r3, r7, r4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f383 8810 	msr	PRIMASK, r3
}
 800285a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285c:	f3ef 8310 	mrs	r3, PRIMASK
 8002860:	61bb      	str	r3, [r7, #24]
  return(result);
 8002862:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002864:	2484      	movs	r4, #132	; 0x84
 8002866:	193a      	adds	r2, r7, r4
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	2301      	movs	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	438a      	bics	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	193b      	adds	r3, r7, r4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a6:	f3ef 8310 	mrs	r3, PRIMASK
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ae:	2480      	movs	r4, #128	; 0x80
 80028b0:	193a      	adds	r2, r7, r4
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	f383 8810 	msr	PRIMASK, r3
}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2110      	movs	r1, #16
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f858 	bl	800299c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028ec:	e044      	b.n	8002978 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028ee:	23a4      	movs	r3, #164	; 0xa4
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	035b      	lsls	r3, r3, #13
 80028f8:	4013      	ands	r3, r2
 80028fa:	d010      	beq.n	800291e <HAL_UART_IRQHandler+0x546>
 80028fc:	239c      	movs	r3, #156	; 0x9c
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	03db      	lsls	r3, r3, #15
 8002906:	4013      	ands	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	0352      	lsls	r2, r2, #13
 8002912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 ff12 	bl	8003740 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800291c:	e02f      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800291e:	23a4      	movs	r3, #164	; 0xa4
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	4013      	ands	r3, r2
 8002928:	d00f      	beq.n	800294a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800292a:	23a0      	movs	r3, #160	; 0xa0
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	4013      	ands	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01e      	beq.n	800297c <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	0010      	movs	r0, r2
 8002946:	4798      	blx	r3
    }
    return;
 8002948:	e018      	b.n	800297c <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800294a:	23a4      	movs	r3, #164	; 0xa4
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	4013      	ands	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_UART_IRQHandler+0x5a6>
 8002956:	23a0      	movs	r3, #160	; 0xa0
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	4013      	ands	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fd58 	bl	800341a <UART_EndTransmit_IT>
    return;
 800296a:	e008      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
      return;
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	e006      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
    return;
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	e004      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
      return;
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	e002      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
      return;
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	e000      	b.n	800297e <HAL_UART_IRQHandler+0x5a6>
    return;
 800297c:	46c0      	nop			; (mov r8, r8)
  }

}
 800297e:	46bd      	mov	sp, r7
 8002980:	b02b      	add	sp, #172	; 0xac
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	fffffeff 	.word	0xfffffeff
 8002988:	fffffedf 	.word	0xfffffedf

0800298c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	000a      	movs	r2, r1
 80029a6:	1cbb      	adds	r3, r7, #2
 80029a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b4:	b5b0      	push	{r4, r5, r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029bc:	231a      	movs	r3, #26
 80029be:	2218      	movs	r2, #24
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4313      	orrs	r3, r2
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4ab4      	ldr	r2, [pc, #720]	; (8002cb8 <UART_SetConfig+0x304>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4aaf      	ldr	r2, [pc, #700]	; (8002cbc <UART_SetConfig+0x308>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4aa9      	ldr	r2, [pc, #676]	; (8002cc0 <UART_SetConfig+0x30c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a24:	4313      	orrs	r3, r2
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4aa5      	ldr	r2, [pc, #660]	; (8002cc4 <UART_SetConfig+0x310>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4aa1      	ldr	r2, [pc, #644]	; (8002cc8 <UART_SetConfig+0x314>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d131      	bne.n	8002aac <UART_SetConfig+0xf8>
 8002a48:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <UART_SetConfig+0x318>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d01d      	beq.n	8002a90 <UART_SetConfig+0xdc>
 8002a54:	d823      	bhi.n	8002a9e <UART_SetConfig+0xea>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d00c      	beq.n	8002a74 <UART_SetConfig+0xc0>
 8002a5a:	d820      	bhi.n	8002a9e <UART_SetConfig+0xea>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <UART_SetConfig+0xb2>
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00e      	beq.n	8002a82 <UART_SetConfig+0xce>
 8002a64:	e01b      	b.n	8002a9e <UART_SetConfig+0xea>
 8002a66:	231b      	movs	r3, #27
 8002a68:	2218      	movs	r2, #24
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	19db      	adds	r3, r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e065      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002a74:	231b      	movs	r3, #27
 8002a76:	2218      	movs	r2, #24
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	19db      	adds	r3, r3, r7
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e05e      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002a82:	231b      	movs	r3, #27
 8002a84:	2218      	movs	r2, #24
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	19db      	adds	r3, r3, r7
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e057      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002a90:	231b      	movs	r3, #27
 8002a92:	2218      	movs	r2, #24
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19db      	adds	r3, r3, r7
 8002a98:	2208      	movs	r2, #8
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e050      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e049      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a83      	ldr	r2, [pc, #524]	; (8002cc0 <UART_SetConfig+0x30c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d13e      	bne.n	8002b34 <UART_SetConfig+0x180>
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <UART_SetConfig+0x318>)
 8002ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	22c0      	movs	r2, #192	; 0xc0
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <UART_SetConfig+0x164>
 8002ac8:	22c0      	movs	r2, #192	; 0xc0
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d82a      	bhi.n	8002b26 <UART_SetConfig+0x172>
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d011      	beq.n	8002afc <UART_SetConfig+0x148>
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d822      	bhi.n	8002b26 <UART_SetConfig+0x172>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <UART_SetConfig+0x13a>
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	00d2      	lsls	r2, r2, #3
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <UART_SetConfig+0x156>
 8002aec:	e01b      	b.n	8002b26 <UART_SetConfig+0x172>
 8002aee:	231b      	movs	r3, #27
 8002af0:	2218      	movs	r2, #24
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e021      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002afc:	231b      	movs	r3, #27
 8002afe:	2218      	movs	r2, #24
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e01a      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002b0a:	231b      	movs	r3, #27
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	19db      	adds	r3, r3, r7
 8002b12:	2204      	movs	r2, #4
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e013      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002b18:	231b      	movs	r3, #27
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2208      	movs	r2, #8
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e00c      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2218      	movs	r2, #24
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	19db      	adds	r3, r3, r7
 8002b2e:	2210      	movs	r2, #16
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e005      	b.n	8002b40 <UART_SetConfig+0x18c>
 8002b34:	231b      	movs	r3, #27
 8002b36:	2218      	movs	r2, #24
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	19db      	adds	r3, r3, r7
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <UART_SetConfig+0x30c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d000      	beq.n	8002b4c <UART_SetConfig+0x198>
 8002b4a:	e084      	b.n	8002c56 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b4c:	231b      	movs	r3, #27
 8002b4e:	2218      	movs	r2, #24
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	19db      	adds	r3, r3, r7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d01d      	beq.n	8002b96 <UART_SetConfig+0x1e2>
 8002b5a:	dc20      	bgt.n	8002b9e <UART_SetConfig+0x1ea>
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d015      	beq.n	8002b8c <UART_SetConfig+0x1d8>
 8002b60:	dc1d      	bgt.n	8002b9e <UART_SetConfig+0x1ea>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <UART_SetConfig+0x1b8>
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d005      	beq.n	8002b76 <UART_SetConfig+0x1c2>
 8002b6a:	e018      	b.n	8002b9e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7ff f97e 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002b70:	0003      	movs	r3, r0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b74:	e01c      	b.n	8002bb0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <UART_SetConfig+0x318>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d002      	beq.n	8002b86 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <UART_SetConfig+0x31c>)
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b84:	e014      	b.n	8002bb0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <UART_SetConfig+0x320>)
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b8a:	e011      	b.n	8002bb0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8c:	f7ff f8be 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002b90:	0003      	movs	r3, r0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b94:	e00c      	b.n	8002bb0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b9c:	e008      	b.n	8002bb0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ba2:	231a      	movs	r3, #26
 8002ba4:	2218      	movs	r2, #24
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	19db      	adds	r3, r3, r7
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
        break;
 8002bae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d100      	bne.n	8002bb8 <UART_SetConfig+0x204>
 8002bb6:	e130      	b.n	8002e1a <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d305      	bcc.n	8002bd4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d906      	bls.n	8002be2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002bd4:	231a      	movs	r3, #26
 8002bd6:	2218      	movs	r2, #24
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	19db      	adds	r3, r3, r7
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e11b      	b.n	8002e1a <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	6939      	ldr	r1, [r7, #16]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	000b      	movs	r3, r1
 8002bf0:	0e1b      	lsrs	r3, r3, #24
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	0205      	lsls	r5, r0, #8
 8002bf6:	431d      	orrs	r5, r3
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	021c      	lsls	r4, r3, #8
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	68f9      	ldr	r1, [r7, #12]
 8002c0c:	1900      	adds	r0, r0, r4
 8002c0e:	4169      	adcs	r1, r5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f7fd fb07 	bl	8000230 <__aeabi_uldivmod>
 8002c22:	0002      	movs	r2, r0
 8002c24:	000b      	movs	r3, r1
 8002c26:	0013      	movs	r3, r2
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d309      	bcc.n	8002c48 <UART_SetConfig+0x294>
 8002c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	035b      	lsls	r3, r3, #13
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d204      	bcs.n	8002c48 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e0e8      	b.n	8002e1a <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002c48:	231a      	movs	r3, #26
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	19db      	adds	r3, r3, r7
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e0e1      	b.n	8002e1a <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d000      	beq.n	8002c64 <UART_SetConfig+0x2b0>
 8002c62:	e083      	b.n	8002d6c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002c64:	231b      	movs	r3, #27
 8002c66:	2218      	movs	r2, #24
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	19db      	adds	r3, r3, r7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d834      	bhi.n	8002cdc <UART_SetConfig+0x328>
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <UART_SetConfig+0x324>)
 8002c76:	18d3      	adds	r3, r2, r3
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f8f6 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002c80:	0003      	movs	r3, r0
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c84:	e033      	b.n	8002cee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c86:	f7ff f907 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8e:	e02e      	b.n	8002cee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <UART_SetConfig+0x318>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	4013      	ands	r3, r2
 8002c98:	d002      	beq.n	8002ca0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <UART_SetConfig+0x31c>)
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c9e:	e026      	b.n	8002cee <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <UART_SetConfig+0x320>)
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ca4:	e023      	b.n	8002cee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca6:	f7ff f831 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002caa:	0003      	movs	r3, r0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cae:	e01e      	b.n	8002cee <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb6:	e01a      	b.n	8002cee <UART_SetConfig+0x33a>
 8002cb8:	efff69f3 	.word	0xefff69f3
 8002cbc:	ffffcfff 	.word	0xffffcfff
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	fffff4ff 	.word	0xfffff4ff
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	003d0900 	.word	0x003d0900
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	080037fc 	.word	0x080037fc
      default:
        pclk = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ce0:	231a      	movs	r3, #26
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
        break;
 8002cec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d100      	bne.n	8002cf6 <UART_SetConfig+0x342>
 8002cf4:	e091      	b.n	8002e1a <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	005a      	lsls	r2, r3, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	18d2      	adds	r2, r2, r3
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f7fd fa05 	bl	8000118 <__udivsi3>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	d921      	bls.n	8002d5e <UART_SetConfig+0x3aa>
 8002d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d21c      	bcs.n	8002d5e <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	200e      	movs	r0, #14
 8002d2a:	2418      	movs	r4, #24
 8002d2c:	1903      	adds	r3, r0, r4
 8002d2e:	19db      	adds	r3, r3, r7
 8002d30:	210f      	movs	r1, #15
 8002d32:	438a      	bics	r2, r1
 8002d34:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b299      	uxth	r1, r3
 8002d42:	1903      	adds	r3, r0, r4
 8002d44:	19db      	adds	r3, r3, r7
 8002d46:	1902      	adds	r2, r0, r4
 8002d48:	19d2      	adds	r2, r2, r7
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	1902      	adds	r2, r0, r4
 8002d56:	19d2      	adds	r2, r2, r7
 8002d58:	8812      	ldrh	r2, [r2, #0]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e05d      	b.n	8002e1a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5e:	231a      	movs	r3, #26
 8002d60:	2218      	movs	r2, #24
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e056      	b.n	8002e1a <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6c:	231b      	movs	r3, #27
 8002d6e:	2218      	movs	r2, #24
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d822      	bhi.n	8002dc0 <UART_SetConfig+0x40c>
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <UART_SetConfig+0x484>)
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7ff f872 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d8c:	e021      	b.n	8002dd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d8e:	f7ff f883 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002d92:	0003      	movs	r3, r0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d96:	e01c      	b.n	8002dd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <UART_SetConfig+0x488>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d002      	beq.n	8002da8 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <UART_SetConfig+0x48c>)
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002da6:	e014      	b.n	8002dd2 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <UART_SetConfig+0x490>)
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dac:	e011      	b.n	8002dd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7fe ffad 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002db2:	0003      	movs	r3, r0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db6:	e00c      	b.n	8002dd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dbe:	e008      	b.n	8002dd2 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dc4:	231a      	movs	r3, #26
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	19db      	adds	r3, r3, r7
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
        break;
 8002dd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	085a      	lsrs	r2, r3, #1
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	18d2      	adds	r2, r2, r3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f7fd f995 	bl	8000118 <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	d909      	bls.n	8002e0e <UART_SetConfig+0x45a>
 8002dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	025b      	lsls	r3, r3, #9
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d204      	bcs.n	8002e0e <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	e005      	b.n	8002e1a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002e0e:	231a      	movs	r3, #26
 8002e10:	2218      	movs	r2, #24
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	19db      	adds	r3, r3, r7
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2200      	movs	r2, #0
 8002e24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e26:	231a      	movs	r3, #26
 8002e28:	2218      	movs	r2, #24
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b00e      	add	sp, #56	; 0x38
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	08003820 	.word	0x08003820
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	003d0900 	.word	0x003d0900
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <UART_AdvFeatureConfig+0x144>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a43      	ldr	r2, [pc, #268]	; (8002f90 <UART_AdvFeatureConfig+0x148>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a3b      	ldr	r2, [pc, #236]	; (8002f94 <UART_AdvFeatureConfig+0x14c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2208      	movs	r2, #8
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <UART_AdvFeatureConfig+0x150>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2210      	movs	r2, #16
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <UART_AdvFeatureConfig+0x154>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2220      	movs	r2, #32
 8002f00:	4013      	ands	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <UART_AdvFeatureConfig+0x158>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2240      	movs	r2, #64	; 0x40
 8002f22:	4013      	ands	r3, r2
 8002f24:	d01d      	beq.n	8002f62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <UART_AdvFeatureConfig+0x15c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	035b      	lsls	r3, r3, #13
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d10b      	bne.n	8002f62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <UART_AdvFeatureConfig+0x160>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <UART_AdvFeatureConfig+0x164>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	fffdffff 	.word	0xfffdffff
 8002f90:	fffeffff 	.word	0xfffeffff
 8002f94:	fffbffff 	.word	0xfffbffff
 8002f98:	ffff7fff 	.word	0xffff7fff
 8002f9c:	ffffefff 	.word	0xffffefff
 8002fa0:	ffffdfff 	.word	0xffffdfff
 8002fa4:	ffefffff 	.word	0xffefffff
 8002fa8:	ff9fffff 	.word	0xff9fffff
 8002fac:	fff7ffff 	.word	0xfff7ffff

08002fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fc0:	f7fd fec0 	bl	8000d44 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d10c      	bne.n	8002ff0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	0391      	lsls	r1, r2, #14
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <UART_CheckIdleState+0x8c>)
 8002fe0:	9200      	str	r2, [sp, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f000 f82c 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d001      	beq.n	8002ff0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e021      	b.n	8003034 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d10c      	bne.n	8003018 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	03d1      	lsls	r1, r2, #15
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <UART_CheckIdleState+0x8c>)
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	f000 f818 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e00d      	b.n	8003034 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2274      	movs	r2, #116	; 0x74
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	01ffffff 	.word	0x01ffffff

08003040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b094      	sub	sp, #80	; 0x50
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	e0a3      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003054:	3301      	adds	r3, #1
 8003056:	d100      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003058:	e09f      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fd fe73 	bl	8000d44 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <UART_WaitOnFlagUntilTimeout+0x30>
 800306a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306c:	2b00      	cmp	r3, #0
 800306e:	d13d      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003070:	f3ef 8310 	mrs	r3, PRIMASK
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
 800307a:	2301      	movs	r3, #1
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	494c      	ldr	r1, [pc, #304]	; (80031c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
 80030ac:	2301      	movs	r3, #1
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2274      	movs	r2, #116	; 0x74
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e067      	b.n	80031bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d050      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	401a      	ands	r2, r3
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	429a      	cmp	r2, r3
 800310a:	d146      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003116:	f3ef 8310 	mrs	r3, PRIMASK
 800311a:	613b      	str	r3, [r7, #16]
  return(result);
 800311c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	2301      	movs	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4923      	ldr	r1, [pc, #140]	; (80031c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003138:	400a      	ands	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003148:	f3ef 8310 	mrs	r3, PRIMASK
 800314c:	61fb      	str	r3, [r7, #28]
  return(result);
 800314e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
 8003152:	2301      	movs	r3, #1
 8003154:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	438a      	bics	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f383 8810 	msr	PRIMASK, r3
}
 8003178:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	2120      	movs	r1, #32
 800318c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2274      	movs	r2, #116	; 0x74
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e010      	b.n	80031bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	425a      	negs	r2, r3
 80031aa:	4153      	adcs	r3, r2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	001a      	movs	r2, r3
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d100      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80031b8:	e74b      	b.n	8003052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b014      	add	sp, #80	; 0x50
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	fffffe5f 	.word	0xfffffe5f

080031c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	1dbb      	adds	r3, r7, #6
 80031d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1dba      	adds	r2, r7, #6
 80031e0:	2158      	movs	r1, #88	; 0x58
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1dba      	adds	r2, r7, #6
 80031ea:	215a      	movs	r1, #90	; 0x5a
 80031ec:	8812      	ldrh	r2, [r2, #0]
 80031ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	015b      	lsls	r3, r3, #5
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10d      	bne.n	800321e <UART_Start_Receive_IT+0x56>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <UART_Start_Receive_IT+0x4c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	225c      	movs	r2, #92	; 0x5c
 800320e:	4943      	ldr	r1, [pc, #268]	; (800331c <UART_Start_Receive_IT+0x154>)
 8003210:	5299      	strh	r1, [r3, r2]
 8003212:	e02e      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	225c      	movs	r2, #92	; 0x5c
 8003218:	21ff      	movs	r1, #255	; 0xff
 800321a:	5299      	strh	r1, [r3, r2]
 800321c:	e029      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <UART_Start_Receive_IT+0x7a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <UART_Start_Receive_IT+0x70>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	225c      	movs	r2, #92	; 0x5c
 8003232:	21ff      	movs	r1, #255	; 0xff
 8003234:	5299      	strh	r1, [r3, r2]
 8003236:	e01c      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	225c      	movs	r2, #92	; 0x5c
 800323c:	217f      	movs	r1, #127	; 0x7f
 800323e:	5299      	strh	r1, [r3, r2]
 8003240:	e017      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	055b      	lsls	r3, r3, #21
 800324a:	429a      	cmp	r2, r3
 800324c:	d10d      	bne.n	800326a <UART_Start_Receive_IT+0xa2>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <UART_Start_Receive_IT+0x98>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	225c      	movs	r2, #92	; 0x5c
 800325a:	217f      	movs	r1, #127	; 0x7f
 800325c:	5299      	strh	r1, [r3, r2]
 800325e:	e008      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	225c      	movs	r2, #92	; 0x5c
 8003264:	213f      	movs	r1, #63	; 0x3f
 8003266:	5299      	strh	r1, [r3, r2]
 8003268:	e003      	b.n	8003272 <UART_Start_Receive_IT+0xaa>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	225c      	movs	r2, #92	; 0x5c
 800326e:	2100      	movs	r1, #0
 8003270:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	2100      	movs	r1, #0
 8003278:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2222      	movs	r2, #34	; 0x22
 800327e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003280:	f3ef 8310 	mrs	r3, PRIMASK
 8003284:	61fb      	str	r3, [r7, #28]
  return(result);
 8003286:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328a:	2301      	movs	r3, #1
 800328c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	015b      	lsls	r3, r3, #5
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d107      	bne.n	80032ce <UART_Start_Receive_IT+0x106>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <UART_Start_Receive_IT+0x158>)
 80032ca:	665a      	str	r2, [r3, #100]	; 0x64
 80032cc:	e002      	b.n	80032d4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <UART_Start_Receive_IT+0x15c>)
 80032d2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2274      	movs	r2, #116	; 0x74
 80032d8:	2100      	movs	r1, #0
 80032da:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	613b      	str	r3, [r7, #16]
  return(result);
 80032e2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	2301      	movs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2190      	movs	r1, #144	; 0x90
 80032fe:	0049      	lsls	r1, r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b00c      	add	sp, #48	; 0x30
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	000001ff 	.word	0x000001ff
 8003320:	080035d9 	.word	0x080035d9
 8003324:	08003471 	.word	0x08003471

08003328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003330:	f3ef 8310 	mrs	r3, PRIMASK
 8003334:	617b      	str	r3, [r7, #20]
  return(result);
 8003336:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	2301      	movs	r3, #1
 800333c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4925      	ldr	r1, [pc, #148]	; (80033e8 <UART_EndRxTransfer+0xc0>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f383 8810 	msr	PRIMASK, r3
}
 8003360:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003362:	f3ef 8310 	mrs	r3, PRIMASK
 8003366:	623b      	str	r3, [r7, #32]
  return(result);
 8003368:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
 800336c:	2301      	movs	r3, #1
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	438a      	bics	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	2b01      	cmp	r3, #1
 800339a:	d118      	bne.n	80033ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339c:	f3ef 8310 	mrs	r3, PRIMASK
 80033a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a6:	2301      	movs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2110      	movs	r1, #16
 80033be:	438a      	bics	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b00e      	add	sp, #56	; 0x38
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	fffffedf 	.word	0xfffffedf

080033ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	225a      	movs	r2, #90	; 0x5a
 80033fe:	2100      	movs	r1, #0
 8003400:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2252      	movs	r2, #82	; 0x52
 8003406:	2100      	movs	r1, #0
 8003408:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff fabd 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	60bb      	str	r3, [r7, #8]
  return(result);
 8003428:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f7fd fade 	bl	8000a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003478:	203e      	movs	r0, #62	; 0x3e
 800347a:	183b      	adds	r3, r7, r0
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	215c      	movs	r1, #92	; 0x5c
 8003480:	5a52      	ldrh	r2, [r2, r1]
 8003482:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003488:	2b22      	cmp	r3, #34	; 0x22
 800348a:	d000      	beq.n	800348e <UART_RxISR_8BIT+0x1e>
 800348c:	e095      	b.n	80035ba <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	213c      	movs	r1, #60	; 0x3c
 8003496:	187b      	adds	r3, r7, r1
 8003498:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800349a:	187b      	adds	r3, r7, r1
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b2d9      	uxtb	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	400a      	ands	r2, r1
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	225a      	movs	r2, #90	; 0x5a
 80034be:	5a9b      	ldrh	r3, [r3, r2]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b299      	uxth	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	225a      	movs	r2, #90	; 0x5a
 80034ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	225a      	movs	r2, #90	; 0x5a
 80034d0:	5a9b      	ldrh	r3, [r3, r2]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d178      	bne.n	80035ca <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e2:	2301      	movs	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4936      	ldr	r1, [pc, #216]	; (80035d4 <UART_RxISR_8BIT+0x164>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
 8003514:	2301      	movs	r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	438a      	bics	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	2b01      	cmp	r3, #1
 800354e:	d12f      	bne.n	80035b0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	60fb      	str	r3, [r7, #12]
  return(result);
 800355c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2110      	movs	r1, #16
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2210      	movs	r2, #16
 8003590:	4013      	ands	r3, r2
 8003592:	2b10      	cmp	r3, #16
 8003594:	d103      	bne.n	800359e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2258      	movs	r2, #88	; 0x58
 80035a2:	5a9a      	ldrh	r2, [r3, r2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0011      	movs	r1, r2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff f9f7 	bl	800299c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035ae:	e00c      	b.n	80035ca <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7fd f97e 	bl	80008b4 <HAL_UART_RxCpltCallback>
}
 80035b8:	e007      	b.n	80035ca <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2108      	movs	r1, #8
 80035c6:	430a      	orrs	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b010      	add	sp, #64	; 0x40
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	fffffedf 	.word	0xfffffedf

080035d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b090      	sub	sp, #64	; 0x40
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80035e0:	203e      	movs	r0, #62	; 0x3e
 80035e2:	183b      	adds	r3, r7, r0
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	215c      	movs	r1, #92	; 0x5c
 80035e8:	5a52      	ldrh	r2, [r2, r1]
 80035ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f0:	2b22      	cmp	r3, #34	; 0x22
 80035f2:	d000      	beq.n	80035f6 <UART_RxISR_16BIT+0x1e>
 80035f4:	e095      	b.n	8003722 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fc:	213c      	movs	r1, #60	; 0x3c
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003608:	187b      	adds	r3, r7, r1
 800360a:	183a      	adds	r2, r7, r0
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	4013      	ands	r3, r2
 8003612:	b29a      	uxth	r2, r3
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	1c9a      	adds	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	225a      	movs	r2, #90	; 0x5a
 8003626:	5a9b      	ldrh	r3, [r3, r2]
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b299      	uxth	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	225a      	movs	r2, #90	; 0x5a
 8003632:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	225a      	movs	r2, #90	; 0x5a
 8003638:	5a9b      	ldrh	r3, [r3, r2]
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d178      	bne.n	8003732 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003640:	f3ef 8310 	mrs	r3, PRIMASK
 8003644:	617b      	str	r3, [r7, #20]
  return(result);
 8003646:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4936      	ldr	r1, [pc, #216]	; (800373c <UART_RxISR_16BIT+0x164>)
 8003662:	400a      	ands	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003672:	f3ef 8310 	mrs	r3, PRIMASK
 8003676:	623b      	str	r3, [r7, #32]
  return(result);
 8003678:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	438a      	bics	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d12f      	bne.n	8003718 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c8:	2301      	movs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2110      	movs	r1, #16
 80036e0:	438a      	bics	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2210      	movs	r2, #16
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d103      	bne.n	8003706 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2210      	movs	r2, #16
 8003704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2258      	movs	r2, #88	; 0x58
 800370a:	5a9a      	ldrh	r2, [r3, r2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0011      	movs	r1, r2
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff f943 	bl	800299c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003716:	e00c      	b.n	8003732 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f7fd f8ca 	bl	80008b4 <HAL_UART_RxCpltCallback>
}
 8003720:	e007      	b.n	8003732 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2108      	movs	r1, #8
 800372e:	430a      	orrs	r2, r1
 8003730:	619a      	str	r2, [r3, #24]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b010      	add	sp, #64	; 0x40
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	fffffedf 	.word	0xfffffedf

08003740 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <__libc_init_array>:
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	2600      	movs	r6, #0
 8003754:	4d0c      	ldr	r5, [pc, #48]	; (8003788 <__libc_init_array+0x38>)
 8003756:	4c0d      	ldr	r4, [pc, #52]	; (800378c <__libc_init_array+0x3c>)
 8003758:	1b64      	subs	r4, r4, r5
 800375a:	10a4      	asrs	r4, r4, #2
 800375c:	42a6      	cmp	r6, r4
 800375e:	d109      	bne.n	8003774 <__libc_init_array+0x24>
 8003760:	2600      	movs	r6, #0
 8003762:	f000 f821 	bl	80037a8 <_init>
 8003766:	4d0a      	ldr	r5, [pc, #40]	; (8003790 <__libc_init_array+0x40>)
 8003768:	4c0a      	ldr	r4, [pc, #40]	; (8003794 <__libc_init_array+0x44>)
 800376a:	1b64      	subs	r4, r4, r5
 800376c:	10a4      	asrs	r4, r4, #2
 800376e:	42a6      	cmp	r6, r4
 8003770:	d105      	bne.n	800377e <__libc_init_array+0x2e>
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	00b3      	lsls	r3, r6, #2
 8003776:	58eb      	ldr	r3, [r5, r3]
 8003778:	4798      	blx	r3
 800377a:	3601      	adds	r6, #1
 800377c:	e7ee      	b.n	800375c <__libc_init_array+0xc>
 800377e:	00b3      	lsls	r3, r6, #2
 8003780:	58eb      	ldr	r3, [r5, r3]
 8003782:	4798      	blx	r3
 8003784:	3601      	adds	r6, #1
 8003786:	e7f2      	b.n	800376e <__libc_init_array+0x1e>
 8003788:	0800384c 	.word	0x0800384c
 800378c:	0800384c 	.word	0x0800384c
 8003790:	0800384c 	.word	0x0800384c
 8003794:	08003850 	.word	0x08003850

08003798 <memset>:
 8003798:	0003      	movs	r3, r0
 800379a:	1882      	adds	r2, r0, r2
 800379c:	4293      	cmp	r3, r2
 800379e:	d100      	bne.n	80037a2 <memset+0xa>
 80037a0:	4770      	bx	lr
 80037a2:	7019      	strb	r1, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	e7f9      	b.n	800379c <memset+0x4>

080037a8 <_init>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr

080037b4 <_fini>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr
